# %% Import Functions
import wx
import csv
import pickle
import pefile
import pandas as pd 
import sklearn
from PyQt5 import QtCore, QtGui, QtWidgets
from sklearn.ensemble import RandomForestClassifier

import os
import pandas as pd 
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn.neighbors
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, plot_confusion_matrix

# %% RECOMMEND CODE FOR --ONEFILE
def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)
    
# %% Loging Information
def loging(message, type="INFO"):
    with open("AppData/logs/log_file.txt", "a") as log:
        log.write("["+type+"]:" + message + '\n')

# %% Extract the PE values and return all the required values in a json file
def c_json(name, pe, malware):
    content=[]
    with open('AppData/suspicious_functions.txt') as f:
        content = f.readlines()
    content = [x.strip() for x in content] 
    name_packers=[]
    with open('AppData/name_packers.txt') as f:
        name_packers = f.readlines()
    name_packers = [x.strip() for x in name_packers] 
    count_suspicious_functions = 0
    number_packers = 0
    
    entropy = map(lambda x:x.get_entropy(), pe.sections)
    raw_sizes = map(lambda x:x.SizeOfRawData, pe.sections)
    virtual_sizes = map(lambda x:x.Misc_VirtualSize, pe.sections)
    physical_address = map(lambda x:x.Misc_PhysicalAddress, pe.sections)
    virtual_address = map(lambda x:x.VirtualAddress, pe.sections)
    pointer_raw_data = map(lambda x:x.PointerToRawData, pe.sections)
    characteristics = map(lambda x:x.Characteristics, pe.sections)
    data = {'Name':name,
            'e_magic':pe.DOS_HEADER.e_magic,
            'e_cblp':pe.DOS_HEADER.e_cblp,
            'e_cp':pe.DOS_HEADER.e_cp,
            'e_crlc':pe.DOS_HEADER.e_crlc,
            'e_cparhdr':pe.DOS_HEADER.e_cparhdr,
            'e_minalloc':pe.DOS_HEADER.e_minalloc,
            'e_maxalloc':pe.DOS_HEADER.e_maxalloc,
            'e_ss':pe.DOS_HEADER.e_ss,
            'e_sp':pe.DOS_HEADER.e_sp,
            'e_csum':pe.DOS_HEADER.e_csum,
            'e_ip':pe.DOS_HEADER.e_ip,
            'e_cs':pe.DOS_HEADER.e_cs,
            'e_lfarlc':pe.DOS_HEADER.e_lfarlc,
            'e_ovno':pe.DOS_HEADER.e_ovno,
            'e_oemid':pe.DOS_HEADER.e_oemid,
            'e_oeminfo':pe.DOS_HEADER.e_oeminfo,
            'e_lfanew':pe.DOS_HEADER.e_lfanew,
            'Machine':pe.FILE_HEADER.Machine,
            'NumberOfSections':pe.FILE_HEADER.NumberOfSections,
            'TimeDateStamp':pe.FILE_HEADER.TimeDateStamp,
            'PointerToSymbolTable':pe.FILE_HEADER.PointerToSymbolTable,
            'NumberOfSymbols':pe.FILE_HEADER.NumberOfSymbols,
            'SizeOfOptionalHeader':pe.FILE_HEADER.SizeOfOptionalHeader,
            'Characteristics':pe.FILE_HEADER.Characteristics,
            'Magic':pe.OPTIONAL_HEADER.Magic,
            'MajorLinkerVersion':pe.OPTIONAL_HEADER.MajorLinkerVersion,
            'MinorLinkerVersion':pe.OPTIONAL_HEADER.MinorLinkerVersion,
            'SizeOfCode':pe.OPTIONAL_HEADER.SizeOfCode,
            'SizeOfInitializedData':pe.OPTIONAL_HEADER.SizeOfInitializedData,
            'SizeOfUninitializedData':pe.OPTIONAL_HEADER.SizeOfUninitializedData,
            'AddressOfEntryPoint':pe.OPTIONAL_HEADER.AddressOfEntryPoint,
            'BaseOfCode':pe.OPTIONAL_HEADER.BaseOfCode,
            'ImageBase':pe.OPTIONAL_HEADER.ImageBase,
            'SectionAlignment':pe.OPTIONAL_HEADER.SectionAlignment,
            'FileAlignment':pe.OPTIONAL_HEADER.FileAlignment,
            'MajorOperatingSystemVersion':pe.OPTIONAL_HEADER.MajorOperatingSystemVersion,
            'MinorOperatingSystemVersion':pe.OPTIONAL_HEADER.MinorOperatingSystemVersion,
            'MajorImageVersion':pe.OPTIONAL_HEADER.MajorImageVersion,
            'MinorImageVersion':pe.OPTIONAL_HEADER.MinorImageVersion,
            'MajorSubsystemVersion':pe.OPTIONAL_HEADER.MajorSubsystemVersion,
            'MinorSubsystemVersion':pe.OPTIONAL_HEADER.MinorSubsystemVersion,
            'SizeOfHeaders':pe.OPTIONAL_HEADER.SizeOfHeaders,
            'CheckSum':pe.OPTIONAL_HEADER.CheckSum,
            'SizeOfImage':pe.OPTIONAL_HEADER.SizeOfImage,
            'Subsystem':pe.OPTIONAL_HEADER.Subsystem,
            'DllCharacteristics':pe.OPTIONAL_HEADER.DllCharacteristics,
            'SizeOfStackReserve':pe.OPTIONAL_HEADER.SizeOfStackReserve,
            'SizeOfStackCommit':pe.OPTIONAL_HEADER.SizeOfStackCommit,
            'SizeOfHeapReserve':pe.OPTIONAL_HEADER.SizeOfHeapReserve,
            'SizeOfHeapCommit':pe.OPTIONAL_HEADER.SizeOfHeapCommit,
            'LoaderFlags':pe.OPTIONAL_HEADER.LoaderFlags,
            'NumberOfRvaAndSizes':pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
        }
    
    try:
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            for func in entry.imports:
                if func.name.decode('utf-8') in content:
                    count_suspicious_functions+=1
        data['SuspiciousImportFunctions'] = count_suspicious_functions
    except AttributeError:
        data['SuspiciousImportFunctions'] = 0
    try:
        for entry in pe.sections:
            try:
                entry.Name.decode('utf-8')
            except Exception:
                number_packers+=1
            if entry.Name in name_packers:
                number_packers+=1
        data['SuspiciousNameSection'] = number_packers
    except AttributeError as e:
        data['SuspiciousNameSection'] = 0
    try:
        data['SectionsLength'] = len(pe.sections)
    except (ValueError, TypeError):
        data['SectionsLength'] = 0
    try:
        data['SectionMinEntropy'] = min(entropy)
    except (ValueError, TypeError):
        data['SectionMinEntropy'] = 0
    try:
        data['SectionMaxEntropy'] = max(entropy)
    except (ValueError, TypeError):
        data['SectionMaxEntropy'] = 0
    try:
        data['SectionMinRawsize'] = min(raw_sizes)
    except (ValueError, TypeError):
        data['SectionMinRawsize'] = 0
    try:
        data['SectionMaxRawsize'] = max(raw_sizes)
    except (ValueError, TypeError):
        data['SectionMaxRawsize'] = 0
    try:
        data['SectionMinVirtualsize'] = min(virtual_sizes)
    except (ValueError, TypeError):
        data['SectionMinVirtualsize'] = 0
    try:
        data['SectionMaxVirtualsize'] = max(virtual_sizes)
    except (ValueError, TypeError):
        data['SectionMaxVirtualsize'] = 0
    try:
        data['SectionMaxVirtualsize'] = max(virtual_sizes)
    except (ValueError, TypeError):
        data['SectionMaxVirtualsize'] = 0
    try:
        data['SectionMaxPhysical'] = max(physical_address)
    except (ValueError, TypeError):
        data['SectionMaxPhysical'] = 0
    try:
        data['SectionMinPhysical'] = min(physical_address)
    except (ValueError, TypeError):
        data['SectionMinPhysical'] = 0
    try:
        data['SectionMaxVirtual'] = max(virtual_address)
    except (ValueError, TypeError):
        data['SectionMaxVirtual'] = 0
    try:
        data['SectionMinVirtual'] = min(virtual_address)
    except (ValueError, TypeError):
        data['SectionMinVirtual'] = 0
    try:
        data['SectionMaxPointerData'] = max(pointer_raw_data)
    except (ValueError, TypeError):
        data['SectionMaxPointerData'] = 0
    try:
        data['SectionMinPointerData'] = min(pointer_raw_data)
    except (ValueError, TypeError):
        data['SectionMinPointerData'] = 0
    try:
        data['SectionMaxChar'] = max(characteristics)
    except (ValueError, TypeError):
        data['SectionMaxChar'] = 0
    try:
        data['SectionMinChar'] = min(characteristics)
    except (ValueError, TypeError):
        data['SectionMainChar'] = 0
    try:
        data['DirectoryEntryImport'] = (len(pe.DIRECTORY_ENTRY_IMPORT))
        imports = sum([x.imports for x in pe.DIRECTORY_ENTRY_IMPORT], [])
        data['DirectoryEntryImportSize'] = (len(imports))
    except AttributeError:
        data['DirectoryEntryImport'] = 0
        data['DirectoryEntryImportSize'] =0
    #Exports
    try:
        data['DirectoryEntryExport']  = (len(pe.DIRECTORY_ENTRY_EXPORT.symbols))
    except AttributeError:
        # No export
        data['DirectoryEntryExport']  = 0
    data[ 'ImageDirectoryEntryExport' ] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_EXPORT']].VirtualAddress
    data[ 'ImageDirectoryEntryImport' ] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT']].VirtualAddress
    data[ 'ImageDirectoryEntryResource' ] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_RESOURCE']].VirtualAddress
    data[ 'ImageDirectoryEntryException' ] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_EXCEPTION']].VirtualAddress
    data[ 'ImageDirectoryEntrySecurity' ] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_SECURITY']].VirtualAddress
    return data

# %% Extract Pe Details 
def extractPeDetails(preditExePath, predictCSV = 'extractedPeExe.csv'):
    with open('AppData/Dataset/'+ predictCSV, 'w') as csvfile:
        p_json = c_json('test', pefile.PE(preditExePath, fast_load=True), 0)
        fieldnames = p_json.keys()
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        try:
            pe =  pefile.PE(preditExePath)
            writer.writerow(c_json(preditExePath, pe, None))
        except  Exception as e:
                print(e)

# %% Read the dataset
def readFile(filename, head = False, info = False):
    data = pd.read_csv('AppData/dataset/'+filename)
    if (head == True):
        print(data.head())
    if (info == True):
        print(data.info())
    return data

# %% Predition of executables
def predictSoftware(pkl_filename, test_data):
    test_data = readFile(test_data)
    used_data = test_data.drop(['Name', 'Machine', 'TimeDateStamp','SuspiciousImportFunctions', 'SuspiciousNameSection'], axis=1)  
    loaded_model = pickle.load(open('AppData/'+pkl_filename,'rb'))
    result = loaded_model.predict(used_data)
    name = test_data.Name
    for (i,j) in zip(name, result):
        return ('Malware' if j==1 else 'Benign'), i

# %% Predit Function
def checkPredictSoftware(pklFileName, testData, path):
    extractPeDetails(path)
    prediction, name = predictSoftware(pklFileName, testData)
    if prediction == 'Malware':
        styleSheet = "font-size: 12pt;font-weight: bold;color:  rgb(214, 0, 0);background-color: rgb(217, 151, 145);"
        text = "MALWARE!!\nDO NOT INSTALL"
    elif prediction == 'Benign': 
        styleSheet = "font-size: 12pt;font-weight: bold;color: rgb(21, 178, 19);background-color: rgb(192, 255, 144);" 
        text = "BENIGN EXECUTABLE\n Safe to Install."
    return styleSheet, text

# %% Opens the File load option
def get_path(wildcard):
    app = wx.App(None)
    style = wx.FD_OPEN | wx.FD_FILE_MUST_EXIST
    dialog = wx.FileDialog(None, 'Open', wildcard=wildcard, style=style)
    if dialog.ShowModal() == wx.ID_OK:
        path = dialog.GetPath()
    else:
        path = None
    dialog.Destroy()
    return path

# %% Front End
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(693, 281)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.centralwidget_2.setGeometry(QtCore.QRect(0, 0, 691, 271))
        self.centralwidget_2.setObjectName("centralwidget_2")
        self.heading_1 = QtWidgets.QGroupBox(self.centralwidget_2)
        self.heading_1.setEnabled(True)
        self.heading_1.setGeometry(QtCore.QRect(10, 10, 671, 101))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.heading_1.setFont(font)
        self.heading_1.setObjectName("heading_1")
        self.exePath = QtWidgets.QLineEdit(self.heading_1)
        self.exePath.setGeometry(QtCore.QRect(30, 50, 481, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.exePath.setFont(font)
        self.exePath.setStyleSheet("color: rgb(0, 0, 0);background-color: rgb(211, 211, 211);\n""")
        self.exePath.setFrame(False)
        self.exePath.setReadOnly(True)
        self.exePath.setObjectName("exePath")
        self.label_1 = QtWidgets.QLabel(self.heading_1)
        self.label_1.setGeometry(QtCore.QRect(20, 30, 171, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_1.setFont(font)
        self.label_1.setObjectName("label_1")
        self.selectFile = QtWidgets.QPushButton(self.heading_1)
        self.selectFile.setGeometry(QtCore.QRect(520, 40, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.selectFile.setFont(font)
        self.selectFile.setStyleSheet("border-color: rgb(160,160,160);\n""background-color: rgb(221,221,221);")
        self.selectFile.setObjectName("selectFile")
        self.heading_2 = QtWidgets.QGroupBox(self.centralwidget_2)
        self.heading_2.setEnabled(False)
        self.heading_2.setGeometry(QtCore.QRect(10, 130, 671, 131))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.heading_2.setFont(font)
        self.heading_2.setCheckable(False)
        self.heading_2.setChecked(False)
        self.heading_2.setObjectName("heading_2")
        self.label_2 = QtWidgets.QLabel(self.heading_2)
        self.label_2.setGeometry(QtCore.QRect(20, 30, 241, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.preditButton = QtWidgets.QPushButton(self.heading_2)
        self.preditButton.setGeometry(QtCore.QRect(520, 50, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.preditButton.setFont(font)
        self.preditButton.setStyleSheet("border-color: rgb(160,160,160);\n""background-color: rgb(221,221,221);")
        self.preditButton.setObjectName("preditButton")
        self.predictionResult = QtWidgets.QLabel(self.heading_2)
        self.predictionResult.setGeometry(QtCore.QRect(220, 60, 241, 51))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.predictionResult.setFont(font)
        self.predictionResult.setStyleSheet("background-color: rgb(211, 211, 211);\n""\n""")
        self.predictionResult.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.predictionResult.setFrameShadow(QtWidgets.QFrame.Plain)
        self.predictionResult.setAlignment(QtCore.Qt.AlignCenter)
        self.predictionResult.setObjectName("predictionResult")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        self.selectFile.clicked.connect(self.callGetPath)
        self.preditButton.pressed.connect(self.changeToLoading)
        self.preditButton.clicked.connect(self.callcheckPredictSoftware)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Malware Detection Using Machine Learning"))
        MainWindow.setWindowIcon(QtGui.QIcon('logo.ico'))
        self.heading_1.setTitle(_translate("MainWindow", "SELECT THE EXE FILE"))
        self.exePath.setText(_translate("MainWindow", "EXE PATH"))
        self.label_1.setText(_translate("MainWindow", "Path of the EXE File:"))
        self.selectFile.setText(_translate("MainWindow", "SELECT FILE"))
        self.heading_2.setTitle(_translate("MainWindow", "PREDIT THE EXE FILE"))
        self.label_2.setText(_translate("MainWindow", "Prediction of the Machine Learning Model:"))
        self.preditButton.setText(_translate("MainWindow", "PREDICT EXE FILE"))
        self.predictionResult.setText(_translate("MainWindow", "SELECT PREDICT TO GET THE RESULT"))
    
    def callGetPath(self):
        open("AppData/logs/log_file.txt", 'w').close()
        self.predictionResult.setStyleSheet("font-size: 8pt;background-color: rgb(211, 211, 211);\n""\n""")
        self.predictionResult.setText("SELECT PREDICT TO GET THE RESULT")

        try:
            self.path = get_path('*.exe')
        except Exception as e:
            loging("SOMETHING WITH PATH"+str(e), 'ERROR')
        loging("PATH HAS BEEN SELECTED")
        if self.path != None:
            self.exePath.setText(self.path)
            self.heading_2.setEnabled(True)
            self.heading_1.setEnabled(False)
                
    def changeToLoading(self):
        self.predictionResult.setStyleSheet("font-size: 10pt;font-weight: bold;background-color: rgb(211, 211, 211);")
        self.predictionResult.setText("Predicting the Executable File.\nPlease Wait....")
    
    def callcheckPredictSoftware(self):
        try:
            stylesheet, text = checkPredictSoftware('newrf_model.pkl', 'extractedPeExe.csv', self.path)
            loging("PREDICTION WAS COMPLETE:-> " + text)
        except Exception as e:
            loging("SOME ERROR WITH THE PREDICTION:->"+ str(e))
        
        try:
            self.predictionResult.setStyleSheet(stylesheet)
            self.predictionResult.setText(text)
            loging("MESSAGE WAS DISPLAYED:-> "+ text)
        except Exception as e:
            loging("SOME ERROR WITH THE CHANGING THE VALUE:->"+ str(e))

        self.heading_2.setEnabled(False)
        self.heading_1.setEnabled(True)
                
# %% Main Function
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())