# %% Import Functions
import csv
import json
import pefile
import pickle
import os
import pandas as pd 
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, plot_confusion_matrix

# %% Display all the files
def displayFilesInDirectory(dir, extension):
    listDir = []
    for dirname, _, filenames in os.walk(dir):
        for filename in filenames:
            if filename.endswith(extension):
                listDir.append(os.path.join(dirname, filename))
    return listDir
 
# %% Read the dataset
def readFile(filename, head = False, info = False):
    data = pd.read_csv('AppData/dataset/'+filename)
    if (head == True):
        print(data.head())
    if (info == True):
        print(data.info())
    return data

# %% Display the graph
def graphDisplay(data):
    plt.figure(figsize=(8, 6))
    ax=sns.countplot(data['Malware'])
    ax.set_xticklabels(['Benign', 'Malware'])     

# %% Save the model
def saveModel(rfc, pkl_filename='rf_model.pkl'):
    with open('AppData/'+pkl_filename, 'wb') as file:
        pickle.dump(rfc, file)

# %% Feacture Importance (Check it later)
def featureImportance(rfc, used_data):
    importance = rfc.feature_importances_
    importance_dict = {used_data.columns.values[i]: importance[i] for i in range (len(importance))}
    sorted_dict = {k: v for k, v in sorted(importance_dict.items(), key=lambda item: item[1])}
    plt.figure(figsize=(10, 20))
    sns.barplot(y=list(sorted_dict.keys())[::-1], x=list(sorted_dict.values())[::-1], palette='mako')
    plt.title('Features importance')

# %% Confusion Matrix
def plotConfusionMatrix(rfc, X_test, y_test):
    confusionmatrix = plot_confusion_matrix(rfc, X_test, y_test, values_format='5d')
    plt.title("Confusion Matrix")

# %% Train the model
def getModel(data):
    used_data = data.drop(['Name', 'Machine', 'TimeDateStamp', 'Malware', 'SuspiciousImportFunctions', 'SuspiciousNameSection'], axis=1)
    X_train, X_test, y_train, y_test = train_test_split(used_data, data['Malware'], test_size=0.1, random_state=0)
    print(f'Number of used features is {X_train.shape[1]}')
    rfc = RandomForestClassifier(n_estimators=100, random_state=0, 
                         oob_score = True,
                         max_depth = 16)
    rfc.fit(X_train, y_train)
    y_pred = rfc.predict(X_test)
    print(classification_report(y_test, y_pred, target_names=['Benign', 'Malware']))
    print("Model Accuracy: %f" % rfc.score(X_test, y_test))  
    plotConfusionMatrix(rfc, X_test, y_test)
    featureImportance(rfc, used_data)
    return rfc

# %% Predition of executables
def predictSoftware(pkl_filename, test_data):
    test_data = readFile(test_data)
    used_data = test_data.drop(['Name', 'Machine', 'TimeDateStamp','SuspiciousImportFunctions', 'SuspiciousNameSection'], axis=1)  
    #print(type(test_data), test_data)
    loaded_model = pickle.load(open('AppData/'+pkl_filename,'rb'))
    result = loaded_model.predict(used_data)
    name = test_data.Name
    for (i,j) in zip(name, result):
        print( ('Malware' if j==1 else 'Benign'), i)

# %% Main Function
if __name__ == "__main__":
    data = readFile("test.csv")
    #print(data.info())
    #graphDisplay(data)
    #rfc = getModel(data)

    #saveModel(rfc, 'tempPklFile.pkl')
    #predictSoftware('tempPklFile.pkl', 'dataset_test.csv')
